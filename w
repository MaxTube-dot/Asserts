–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º **–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ, –Ω–æ –º–æ—â–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î PostgreSQL —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å–≤—è–∑—è–º (JOIN) –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.  

### **üìå –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–º–∏–Ω–∏–º—É–º –∫–æ–¥–∞, –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π):**
1. **PostgreSQL** ‚Äì –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.  
2. **PostgREST** ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç REST API –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü.  
3. **Angular + HttpClient** ‚Äì –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.  
4. **Auto-UI** ‚Äì –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.  

---

## **üöÄ –®–∞–≥ 1: –ü–æ–¥–Ω–∏–º–∞–µ–º PostgREST**
PostgREST –¥–∞—Å—Ç –Ω–∞–º REST API –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü **–±–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–¥–∞**.  

### **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ (`docker-compose.yml`)**
```yaml
version: '3'
services:
  postgrest:
    image: postgrest/postgrest
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: "postgres://user:password@postgres:5432/db"
      PGRST_DB_SCHEMA: "public"
      PGRST_DB_ANON_ROLE: "anon_user"  # –î–∞—ë—Ç –¥–æ—Å—Ç—É–ø –Ω–∞ —á—Ç–µ–Ω–∏–µ
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

volumes:
  pg_data:
```

### **–ó–∞–ø—É—Å–∫**
```bash
docker-compose up -d
```
–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ REST:  
- `GET http://localhost:3000/users`  
- `GET http://localhost:3000/orders?select=id,user(name)` (–≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏)  

---

## **üöÄ –®–∞–≥ 2: Angular Auto-UI (–º–∏–Ω–∏–º—É–º –∫–æ–¥–∞)**
–°–æ–∑–¥–∞–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π **–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–≤—è–∑–∏.  

### **1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ HttpClient**
```bash
ng generate service api
```

### **2. –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (`api.service.ts`)**
```typescript
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'http://localhost:3000';

  constructor(private http: HttpClient) {}

  getTables() {
    return this.http.get(`${this.apiUrl}/`);
  }

  getTableData(tableName: string, queryParams = '') {
    return this.http.get(`${this.apiUrl}/${tableName}${queryParams}`);
  }
}
```

### **3. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (`explorer.component.ts`)**
```typescript
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../api.service';

@Component({
  selector: 'app-explorer',
  template: `
    <div *ngIf="tables">
      <h2>–¢–∞–±–ª–∏—Ü—ã</h2>
      <ul>
        <li *ngFor="let table of tables" (click)="loadTable(table)">
          {{ table }}
        </li>
      </ul>
    </div>

    <div *ngIf="currentTable">
      <h3>{{ currentTable }}</h3>
      <table>
        <tr *ngFor="let row of tableData">
          <td *ngFor="let col of row | keyvalue">
            {{ col.key }}: {{ col.value }}
          </td>
        </tr>
      </table>
    </div>
  `,
})
export class ExplorerComponent implements OnInit {
  tables: string[] = [];
  currentTable: string = '';
  tableData: any[] = [];

  constructor(private api: ApiService) {}

  ngOnInit() {
    this.api.getTables().subscribe((res: any) => {
      this.tables = Object.keys(res);
    });
  }

  loadTable(table: string) {
    this.currentTable = table;
    this.api.getTableData(table, '?limit=10').subscribe((data) => {
      this.tableData = data as any[];
    });
  }
}
```

---

## **üöÄ –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–≤—è–∑—è–º (JOIN)**
PostgREST –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ `select=parent(child)`.  

### **–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º `explorer.component.ts`**
```typescript
loadTable(table: string) {
  this.currentTable = table;
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  const relations = this.getRelationsForTable(table);
  const query = relations.length 
    ? `?select=*,${relations.join(',')}&limit=10` 
    : '?limit=10';

  this.api.getTableData(table, query).subscribe((data) => {
    this.tableData = data as any[];
  });
}

// –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
getRelationsForTable(table: string): string[] {
  const relations: Record<string, string[]> = {
    orders: ['user(*)'],  // –ü—Ä–∏–º–µ—Ä: —É orders –µ—Å—Ç—å —Å–≤—è–∑—å —Å users
    posts: ['author(*)', 'comments(*)'],
  };
  return relations[table] || [];
}
```

–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É `orders` –±—É–¥—É—Ç –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ `users`!  

---

## **üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç**
‚úÖ **0 —Å—Ç—Ä–æ–∫ SQL** ‚Äì PostgREST —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç API.  
‚úÖ **0 —Ä—É—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π** ‚Äì Angular –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª—é–±—ã–µ —Ç–∞–±–ª–∏—Ü—ã.  
‚úÖ **JOIN –±–µ–∑ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤** ‚Äì —Å–≤—è–∑–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.  

### **–ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?**
1. **–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π** ‚Äì —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ `information_schema`.  
2. **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞** ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL PostgREST.  
3. **–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å** ‚Äì –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Angular Material –¥–ª—è —Ç–∞–±–ª–∏—Ü.  

---

## **üìå –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ PostgREST**
| –î–µ–π—Å—Ç–≤–∏–µ                    | URL                                      |
|-----------------------------|-----------------------------------------|
| –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏            | `GET /users`                            |
| –ó–∞–∫–∞–∑—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏          | `GET /orders?select=*,user(*)`          |
| –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è                  | `GET /users?age=gt.18`                  |
| –ü–∞–≥–∏–Ω–∞—Ü–∏—è                   | `GET /posts?limit=10&offset=20`         |

---

### **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
- –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å PostgREST –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (Nginx, JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è).  
- –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Angular.  
- –°–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (`ag-grid` –∏–ª–∏ `ngx-datatable`).  

–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–≥—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ª—é–±–æ–π —ç—Ç–∞–ø! üòä